x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./airflow/airflow.dockerfile
  image: airflow-hadoop
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - './airflow/dags:/opt/airflow/dags'
    - './airflow/logs:/opt/airflow/logs'
    - './airflow/plugins:/opt/airflow/plugins'
    - './storage/data:/opt/airflow/data'
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
        condition: service_healthy

services:
  metadatadb:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: hiveuser
      POSTGRES_PASSWORD: hiveuser
      POSTGRES_DB: hivemetastore
    ports:
      - "5432:5432"
    networks:
      - hadoop_net
    volumes:
      - metastore:/var/lib/postgresql/data

  spark-master:
    container_name: cluster-spark-master
    build:
      dockerfile: Dockerfile
      context: .
    image: cluster-spark-image
    entrypoint: ['./entrypoint.sh', 'master']
    volumes:
      - ./storage/data:/opt/spark/data
      - ./storage/jars:/opt/spark/jars_personalizados
      - ./jobs:/opt/spark/apps
      - ./storage/hiveserver_logs:/opt/hive/servidor/logs
      - ./storage/success:/opt/spark/success
      - hdfsdb:/opt/hadoop/data/nameNode
      - ./storage/notebook:/opt/zeppelin/notebook
    env_file:
      - .env.spark
    networks:
      - hadoop_net
    depends_on:
      - metadatadb
    ports:
      - '9090:8080'
      - '9080:9080'
      - '9870:9870'
      - '7077:7077'
      - '8088:8088'
      - '8042:8042'
      - '8090:9090'
      - '50030:50030'
      - '8020:8020'
      - '10000:10000'
      - '9083:9083'
      - '14000:14000'


  spark-worker:
    image: cluster-spark-image
    entrypoint: ['./entrypoint.sh', 'worker']
    depends_on:
      - spark-master
    ports:
      - '8042'
      - '8080'
      - '9870'
      - '7077'
      - '8088'
      - '9090'
      - '50030'
      - '8020'
      - '10000'
      - '9083'
      - '22'
    networks:
      - hadoop_net
    env_file:
      - .env.spark
    volumes:
      - ./storage/data:/opt/spark/data
      - ./storage/jars:/opt/spark/jars_personalizados
      - ./jobs:/opt/spark/apps
      - worker-data:/opt/hadoop/data/dataNode
  
  history-server:
    container_name: dsa-spark-history
    image: cluster-spark-image
    entrypoint: ['./entrypoint.sh', 'history']
    depends_on:
      - spark-master
    networks:
      - hadoop_net
    env_file:
      - .env.spark
    ports:
      - '18080:18080'

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    networks:
      - hadoop_net
    depends_on:
      - spark-master 
    volumes:
      - airflow-db-vol:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    networks:
      - hadoop_net
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    networks:
      - hadoop_net
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    networks:
      - hadoop_net
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
      <<: *airflow-common
      entrypoint: /bin/bash
      command:
          - -c
          - |
            function ver() {
              printf "%04d%04d%04d%04d" $${1//./ }
            }
            airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
            airflow_version_comparable=$$(ver $${airflow_version})
            min_airflow_version=2.2.0
            min_airflow_version_comparable=$$(ver $${min_airflow_version})
            if (( airflow_version_comparable < min_airflow_version_comparable )); then
              echo
              echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
              echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
              echo
              exit 1
            fi
            if [[ -z "${AIRFLOW_UID}" ]]; then
              echo
              echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
              echo "If you are on Linux, you SHOULD follow the instructions below to set "
              echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
              echo "For other operating systems you can get rid of the warning with manually created .env file:"
              echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
              echo
            fi
            one_meg=1048576
            mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
            cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
            disk_available=$$(df / | tail -1 | awk '{print $$4}')
            warning_resources="false"
            if (( mem_available < 4000 )) ; then
              echo
              echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
              echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
              echo
              warning_resources="true"
            fi
            if (( cpus_available < 2 )); then
              echo
              echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
              echo "At least 2 CPUs recommended. You have $${cpus_available}"
              echo
              warning_resources="true"
            fi
            if (( disk_available < one_meg * 10 )); then
              echo
              echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
              echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
              echo
              warning_resources="true"
            fi
            if [[ $${warning_resources} == "true" ]]; then
              echo
              echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
              echo "Please follow the instructions to increase amount of resources available:"
              echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
              echo
            fi
            mkdir -p /sources/logs /sources/dags /sources/plugins
            chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
            exec /entrypoint airflow version
      environment:
          <<: *airflow-common-env
          _AIRFLOW_DB_UPGRADE: 'true'
          _AIRFLOW_WWW_USER_CREATE: 'true'
          _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
          _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
          _PIP_ADDITIONAL_REQUIREMENTS: ''
      networks:
          - hadoop_net
      user: "0:0"
      volumes:
          - .:/sources

  airflow-cli:
      <<: *airflow-common
      profiles:
          - debug
      environment:
          <<: *airflow-common-env
          CONNECTION_CHECK_MAX_COUNT: "0"
      networks:
          - hadoop_net
      command:
          - bash
          - -c
          - airflow
    



networks:
  hadoop_net:
    driver: bridge

volumes:
  airflow-db-vol:
  metastore:
  hdfsdb:
  worker-data:
